<style lang="less">
.logic-index-question-item {
  .logic-index-question-title{
    max-height: 70vh;
    overflow: auto;
    font-size: 16px;
    margin-bottom: 10px;
    .logic-code {
      background-color: #eee;
      display: block;
      padding: 10px 10px;
    }
    .logic-p {
      padding: 5px 0;
      // max-width: 100%;
      // text-align: justify;
      // white-space: normal;
      letter-spacing: 2px !important;
    }
  }
  .logic-index-question-images {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    width: 80vw;
  }
  .logic-index-question-answer {
    padding: 5px 0;
    border-top: 1px solid #eee;
    margin: 10px 0;
  }
  .logic-index-question-analysis {
    .logic-code {
      background-color: #eee;
      display: block;
      padding: 10px 10px;
    }
    .logic-p {
      padding: 5px 0;
      letter-spacing: 2px !important;
      // max-width: 100%;
      // text-align: justify;
      // white-space: normal;
    }
    // width: 80%;
  }
  .logic-index-question-options-isAnswer {
    display: flex;
    align-items: center;
    padding: 5px 0;
    .logic-index-question-options-key {
      border: 1px solid #ddd9d9;
      border-radius: 100%;
      margin-right: 10px;
      padding: 1px 8px;
    }
    .logic-index-question-options-key-youAnswer {
      background-color: #387ffb;
      // border: none;
      color: #fff;
    }
    .logic-index-question-options-key-answer {
      background-color: rgb(95, 169, 93);
      // border: none;
      color: #fff;
    }
    .logic-index-question-options-key-errAnswer {
      background-color: rgb(206, 23, 23);
      // border: none;
      color: #fff;
    }
  }
}
</style>
<wxs module="util" src="../wxs/util.wxs"></wxs>
<template>
  <div>
    <div v-if="questionItem.exa_type === '1'" class="logic-index-question-item">
      <div class="logic-index-question-title">
        <rich-text nodes="{{ questionItem.title }}"></rich-text>
      </div>
      <div v-if="questionItem.isShowAnswer" class="logic-index-question-options">
        <div class="logic-index-question-options-isAnswer" v-for="(value, key) in questionItem.option" :key="key">
          <div class="logic-index-question-options-key {{questionItem.answer === key ? 'logic-index-question-options-key-answer' : ''}} {{questionItem.youAnswer === key && questionItem.answer != key ? 'logic-index-question-options-key-errAnswer' : ''}}">{{key}}</div>
          <div class="logic-index-question-options-value">{{value}}</div>
        </div>
      </div>
      <div v-else class="logic-index-question-options">
        <div class="logic-index-question-options-isAnswer" v-for="(value, key) in questionItem.option" :key="key" @click="onChange(questionItem, key, questionIndex)">
          <div class="logic-index-question-options-key {{questionItem.youAnswer === key ? 'logic-index-question-options-key-youAnswer' : ''}}">{{key}}</div>
          <div class="logic-index-question-options-value">{{value}}</div>
        </div>
      </div>
      <div v-if="questionItem.isShowAnswer" class="logic-index-question-answer">
        {{questionItem.youAnswer==='' ? '你未选择答案，' : ''}}正确答案是：{{questionItem.answer}}
      </div>
      <div v-if="questionItem.isShowAnswer" class="logic-index-question-analysis">
        【解析】：
        <rich-text nodes="{{ questionItem.analysis }}"></rich-text>
      </div>
    </div>
    <div v-else-if="questionItem.exa_type === '2'" class="logic-index-question-item">
      <div class="logic-index-question-title">
        <rich-text nodes="{{ questionItem.title }}"></rich-text>
      </div>
      <div v-if="questionItem.isShowAnswer" class="logic-index-question-options">
        <div class="logic-index-question-options-isAnswer" v-for="(value, key) in questionItem.option" :key="key">
          <div v-if="questionItem.isRight">
            <div class="logic-index-question-options-key logic-index-question-options-key-answer {{!util.includes(questionItem.youAnswer, key) && !util.includes(questionItem.answer, key) ? 'logic-index-question-options-key-errAnswer' : ''}}">{{key}}</div>
          </div>
          <div v-else>
            <div class="logic-index-question-options-key {{util.includes(questionItem.youAnswer, key) ? 'logic-index-question-options-key-errAnswer' : ''}}">{{key}}</div>
          </div>
          <!-- <div class="logic-index-question-options-key {{ util.includes(questionItem.answer, key) ? 'logic-index-question-options-key-answer' : ''}} {{!util.includes(questionItem.youAnswer, key) && !util.includes(questionItem.answer, key) ? 'logic-index-question-options-key-errAnswer' : ''}}">{{key}}</div> -->
          <div class="logic-index-question-options-value">{{value}}</div>
        </div>
      </div>
      <div v-else class="logic-index-question-options">
        <div class="logic-index-question-options-isAnswer" v-for="(value, key) in questionItem.option" :key="key" @click="onMoreChange(questionItem, key, questionIndex)">
          <div class="logic-index-question-options-key" :class="{ 'logic-index-question-options-key-youAnswer': util.includes(questionItem.youAnswer, key)}">{{key}}</div>
          <div class="logic-index-question-options-value">{{value}}</div>
        </div>
      </div>
      <div v-if="questionItem.isShowAnswer" class="logic-index-question-answer">
        {{questionItem.youAnswer==='' ? '你未选择答案，' : ''}}正确答案是：{{questionItem.answer}}
      </div>
      <div v-if="questionItem.isShowAnswer" class="logic-index-question-analysis">
        【解析】：
        <rich-text nodes="{{ questionItem.analysis }}"></rich-text>
      </div>
    </div>
  </div>
</template>
<config>
  {
    usingComponents: {
      "van-radio": "../libs/vant/radio/index",
      "van-radio-group": "../libs/vant/radio-group/index",
      "van-checkbox": "../libs/vant/checkbox/index",
      "van-checkbox-group": "../libs/vant/checkbox-group/index",
    }
  }
</config>
<script>
  import wepy from '@wepy/core'
  import store from '@/store'
  import { mapGetters } from '@wepy/x'
  wepy.component({
    store,
    computed: {
      // 用户信息
      ...mapGetters(['_id', 'user'])
    },
    props: {
      // 父页面传入，请求参数
      questionIndex: {
        type: Number,
        default: ''
      },
      // 父页面传入，请求参数
      questionItem: {
        type: Object,
        default: {
          youAnswer: ''
        }
      }
    },
    data: {
    },
    created () {
    },
    methods: {
      // 单选
      onChange(item, key, index) {
        this.questionItem.youAnswer = key
        this.$emit('onChange',item,key,index)
      },
      onMoreChange (item, key, index) {
        let temp = item.youAnswer ? item.youAnswer.split(',') : []
        let tempIndex = temp.findIndex(ele => ele === key)
        if (tempIndex > -1) {
          temp.splice(tempIndex, 1)
        } else {
          temp.push(key)
        }
        temp.sort((a,b)=>{
          if (a < b) return -1;
          if (a > b) return 1;
          return 0;
        })
        this.questionItem.youAnswer = temp.join(',')
        this.$emit('onMoreChange',item,index)
      }
      // onChange(event,item,index) {
      //   this.$emit('onChange',event,item,index)
      // },
    }
  })
</script>
