<style lang="less">
.page{
  background-color: #eee;
  .logic-index-box {
    padding: 20px 20px;
    .logic-index-item {
      background-color: #fff;
      height: 70vh;
      border-radius: 20px;
      padding: 0 20px;
      overflow: auto;
      .logic-index-item-name {
        padding: 10px;
        font-size: 30px;
        text-align: center;
      }
      .logic-index-item-tag {
        display: flex;
        align-items: center;
        .logic-index-item-count {
          line-height: 1;
          font-size: 14px;
          color: #999;
          margin-right: 30px;
        }
        van-tag {
          line-height: 1;
          margin-right: 10px;
        }
        van-rate {
          line-height: 1;
        }
      }
      .logic-index-item-implication {
        display: flex;
        align-items: flex-start;
        margin-top: 20px;
        .logic-index-item-implication-info {
          font-size: 14px;
          color: #666;
          width: 80%;
        }
        van-tag {
          line-height: 1;
          margin-right: 10px;
        }
      }
      .logic-index-item-synonym {
        display: flex;
        align-items: flex-start;
        margin-top: 20px;
        .logic-index-item-synonym-list {
          font-size: 14px;
          color: #999;
          width: 80%;
          display: flex;
          flex-direction: column;
          .logic-index-item-synonym-item {
            margin-bottom: 5px;
            .logic-index-item-synonym-item-name {
              color: #000;
            }
            .logic-index-item-synonym-item-implication {
              font-size: 14px;
            }
          }
        }
        van-tag {
          line-height: 1;
          margin-right: 10px;
        }
        .logic-index-item-synonym-nodata {
          font-size: 14px;
          color: #999;
        }
      }
      .logic-index-item-title {
        text-align: right;
        font-size: 16px;
        padding: 0 20px;
        color: #999;
      }
      .logic-index-item-introduce {
        font-size: 18px;
        padding: 0 10px;
        margin-top: 10px;
        color: #666;
      }
      .logic-index-item-tag-person {
        font-size: 18px;
        padding: 0 10px;
        margin-top: 10px;
        font-weight: 500;
      }
      .logic-index-item-name-article {
        padding: 10px;
        font-size: 20px;
        text-align: center;
      }
      .logic-index-item-title-article {
        text-align: right;
        font-size: 14px;
        padding: 0 20px;
        color: #999;
      }
      .logic-index-item-introduce-article {
        font-size: 14px;
        padding: 0 10px;
        margin-top: 10px;
        color: #666;
      }
    }
    .logic-index-list-footer {
      display: flex;
      align-items: center;
      justify-content: space-around;
      margin-top: 30px;
    }
  }
  .logic-index-list-popup-list {
    padding: 20px 40px 10px;
    overflow: auto;
    .logic-index-list-popup-item {
      display: flex;
      align-items: center;
      padding: 10px 0;
      border-bottom: 1px solid #eee;
      .logic-index-list-popup-index {
        margin-right: 50px;
        color: #2fcebe;
      }
      .logic-index-list-popup-words {
        flex: 1;
      }
      .logic-index-list-popup-words-title {
        flex: 1;
        font-size: 14 px;
      }
    }
  }
}
</style>
<template>
  <div class="page">
    <div class="logic-index-box">
      <div class="logic-index-item" v-if="options.type === '国考高频成语'">
        <div class="logic-index-item-name">{{wordDetail.name}}</div>
        <div class="logic-index-item-tag">
          <van-tag type="primary">考察</van-tag>
          <div class="logic-index-item-count">考察 {{wordDetail.count}} 次</div>
          <van-rate readonly value="{{ wordDetail.starValue }}" bind:change="onChange" />
        </div>
        <div class="logic-index-item-implication">
          <van-tag type="primary">含义</van-tag>
          <div class="logic-index-item-implication-info">{{wordDetail.implication}}</div>
        </div>
        <div class="logic-index-item-synonym">
          <van-tag type="primary">关联</van-tag>
          <div v-if = "wordDetail.synonymList.length > 0" class="logic-index-item-synonym-list">
            <div class="logic-index-item-synonym-item" v-for="(item, index) in wordDetail.synonymList" :key="index">
              <text class="logic-index-item-synonym-item-name">{{item.name}}：</text>
              <text class="logic-index-item-synonym-item-implication">{{item.implication}}</text>
            </div>
          </div>
          <div v-else class="logic-index-item-synonym-nodata">无关联词语</div>
        </div>
      </div>
      <div class="logic-index-item" v-else-if="options.type === '人物素材'">
        <div class="logic-index-item-name">{{personDetail.name}}</div>
        <div class="logic-index-item-title" v-if="personDetail.title">
          <div class="logic-index-item-title-text">————{{personDetail.title}}</div>
        </div>
        <div class="logic-index-item-tag-person" v-if="personDetail.tag">
          <div class="logic-index-item-tag-info">适用:{{personDetail.tag}}</div>
        </div>
        <div class="logic-index-item-introduce">
          <div class="logic-index-item-introduce-info">{{personDetail.introduce}}</div>
        </div>
      </div>
      <div class="logic-index-item" v-else>
        <div class="logic-index-item-name-article">{{articleDetail.title}}</div>
        <div class="logic-index-item-title-article" v-if="articleDetail.author">
          <div class="logic-index-item-title-text">————{{articleDetail.author}}</div>
        </div>
        <div class="logic-index-item-introduce-article">
          <rich-text nodes="{{ articleDetail.content }}"></rich-text>
          <!-- <div class="logic-index-item-introduce-info">{{articleDetail.content}}</div> -->
        </div>
      </div>
      <div class="logic-index-list-footer">
        <van-button round type="info" @click="previousWord">上一个</van-button>
        <van-button round type="info" @click="showListPopup">列表</van-button>
        <van-button round type="info" v-if="options.type === '申论范文'" @click="doAnaysis(articleDetail)">解析</van-button>
        <van-button round type="info" @click="nextWord">下一个</van-button>
      </div>
    </div>
    <van-popup @click-overlay="clickOverlay" :show="showPopup" position="bottom" round>
      <div class="logic-index-list-popup-list" :style="{ height: '70vh' }">
        <div class="logic-index-list-popup-item" v-for="(item, index) in allList" :key="index" @click="toWords(item._id)">
          <div class="logic-index-list-popup-index">{{index + 1}}</div>
          <div class="logic-index-list-popup-words-title" v-if="options.type === '申论范文'">{{item.title}}</div>
          <div class="logic-index-list-popup-words" v-else>{{item.name}}</div>
          <van-tag v-if="item.isStudyed" type="primary" size="medium">已学</van-tag>
          <van-tag v-else type="primary" plain color="#999999" size="medium">未学</van-tag>
        </div>
      </div>
    </van-popup>
  </div>
</template>
<config>
  {
    navigationBarTitleText: '词语含义',
    usingComponents: {
      "van-rate": "../../libs/vant/rate/index",
      "van-tag": "../../libs/vant/tag/index",
      "van-button": "../../libs/vant/button/index",
      "van-popup": "../../libs/vant/popup/index",
    }
  }
</config>
<script>
  import wepy from '@wepy/core'
  import store from '@/store'
  import { mapGetters } from '@wepy/x'
  import eventHub from '@/common/eventHub'
  import { getWordsList, getWordsDetail } from '@/api/words'
  import { getPersonList, getPersonDetail } from '@/api/person'
  import { getArticleList, getArticleDetail } from '@/api/article'

  wepy.page({
    store,
    computed: {
      // 用户信息
      ...mapGetters(['_id'])
    },
    data: {
      allList: [],
      showPopup: false,
      wordDetail: {},
      personDetail: {},
      articleDetail: {},
      currentWord_id: '',
      options: {}
    },
    async onLoad(options) {
      options.user_id = this._id
      this.options = options
      if (this.options.type === '国考高频成语'){
        await this.getWordsList(options)
        await this.getWordsDetail(this.allList[0]._id)
      } else if (this.options.type === '人物素材') {
        await this.getPersonList(options)
        await this.getPersonDetail(this.allList[0]._id)
      } else {
        await this.getArticleList(options)
        await this.getArticleDetail(this.allList[0]._id)
      }
    },
    methods: {
      // 获取模块词语列表
      async getWordsList(options) {
        wx.showLoading({title: '加载中'})
        let result = await getWordsList(options)
        this.allList = result.result.allWords
        wx.hideLoading()
      },
      // 获取人物素材列表
      async getPersonList(options) {
        wx.showLoading({title: '加载中'})
        let result = await getPersonList(options)
        this.allList = result.result.allPerson
        wx.hideLoading()
      },
      // 获取范文列表
      async getArticleList(options) {
        wx.showLoading({title: '加载中'})
        let result = await getArticleList(options)
        this.allList = result.result.allArticle
        wx.hideLoading()
      },
      // 获取单个词语
      async getWordsDetail(word_id) {
        let options = {}
        options.user_id = this._id
        options.word_id = word_id
        wx.showLoading({title: '加载中'})
        let result = await getWordsDetail(options)
        this.wordDetail = result.result
        this.wordDetail.starValue = this.getStarValue(this.wordDetail.count)
        this.currentWord_id = this.wordDetail._id
        wx.hideLoading()
      },
      // 获取单个人物
      async getPersonDetail(person_id) {
        let options = {}
        options.user_id = this._id
        options.person_id = person_id
        wx.showLoading({title: '加载中'})
        let result = await getPersonDetail(options)
        this.personDetail = result.result
        this.personDetail.starValue = this.getStarValue(this.personDetail.count)
        this.currentWord_id = this.personDetail._id
        wx.hideLoading()
      },
      // 获取单个范文
      async getArticleDetail(article_id) {
        let options = {}
        options.user_id = this._id
        options.article_id = article_id
        wx.showLoading({title: '加载中'})
        let result = await getArticleDetail(options)
        this.articleDetail = result.result
        this.articleDetail.starValue = this.getStarValue(this.articleDetail.count)
        this.currentWord_id = this.articleDetail._id
        wx.hideLoading()
      },
      // 跳转范文解析
      doAnaysis (options) {
        console.log(options.wechat_url)
        let webview = options.wechat_url
        webview = encodeURIComponent(webview)
        wx.navigateTo({
          url: '/pages/index/web-view?webview='+webview,
        })
      },
      async nextWord () {
        let nextIndex = 0
        let index = this.allList.findIndex((item) => item._id == this.currentWord_id)
        nextIndex = index + 1
        if (nextIndex > (this.allList.length - 1)) {
          wx.showToast({
            title: '已经是最后一个了',
            icon: 'success'
          })
        } else {
          if (this.options.type === '国考高频成语'){
            await this.getWordsDetail(this.allList[nextIndex]._id)
          } else if (this.options.type === '人物素材') {
            await this.getPersonDetail(this.allList[nextIndex]._id)
          } else {
            await this.getArticleDetail(this.allList[nextIndex]._id)
          }
        }
      },
      async previousWord () {
        let previousIndex = 0
        let index = this.allList.findIndex((item) => item._id == this.currentWord_id)
        previousIndex = index - 1
        if (previousIndex < 0) {
          wx.showToast({
            title: '前面已经没有了',
            icon: 'success'
          })
        } else {
          if (this.options.type === '国考高频成语'){
            await this.getWordsDetail(this.allList[previousIndex]._id)
          } else if (this.options.type === '人物素材') {
            await this.getPersonDetail(this.allList[previousIndex]._id)
          } else {
            await this.getArticleDetail(this.allList[previousIndex]._id)
          }
        }
      },
      async toWords (id) {
        this.showPopup = false
        if (this.options.type === '国考高频成语'){
          await this.getWordsDetail(id)
        } else if (this.options.type === '人物素材') {
          await this.getPersonDetail(id)
        } else {
          await this.getArticleDetail(id)
        }
      },
      getStarValue (count) {
        let starValue = 0
        if (count > 0 && count < 5) {
          starValue = 1.5
        } else if (count>= 5 && count < 10) {
          starValue = 2.5
        } else if (count>= 10 && count < 20) {
          starValue = 3.5
        } else if (count>= 20) {
          starValue = 5
        }
        return starValue
      },
      async showListPopup () {
        this.showPopup = !this.showPopup
        if (this.options.type === '国考高频成语'){
          await this.getWordsList(this.options)
        } else if (this.options.type === '人物素材') {
          await this.getPersonList(this.options)
        } else {
          await this.getArticleList(this.options)
        }
      },
      clickOverlay () {
        this.showPopup = false
      }
    }
  })
</script>
