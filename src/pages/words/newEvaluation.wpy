<style lang="less">
.page{
  background-image: url('https://7072-prod-2gzhco766f4e1e27-1304834920.tcb.qcloud.la/index/word-bg.jpeg?sign=269ddf3c0ca16b660380afa03cb7c172&t=1696360119');
  // background-color: #F5F7FB;
  height: auto;
  .logic-index-box {
    padding: 20px 20px;
    .logic-index-header {
      color: #666;
    }
    .logic-index-word-name-list {
      display: flex;
      align-items: center;
      flex-wrap: wrap;
      margin-top: 10px;
      .logic-index-word-name-item {
        flex: 0 0 30%;
        text-align: center;
        padding: 5px 0;
        margin-right: 5px;
        margin-bottom: 10px;
        border-radius: 10px;
        border: 1px solid #999;
      }
      .logic-index-word-name-item-isCurrent {
        border: 1px solid #3C7CFC;
      }
      .logic-index-word-name-item-answer {
        border: 1px solid rgb(100, 235, 199,0.6);
      }
      .logic-index-word-name-item-errAnswer {
        border: 1px solid rgb(218, 152, 152,0.6);
        animation-delay: 0s;
        animation-duration: .5s;
        animation-iteration-count: 1;
        animation-name: shake-horizontal;
        animation-play-state: running;
        animation-timing-function: ease-in-out;
      }
    }
    .logic-index-word-implication-list {
      margin-top: 10px;
      .logic-index-word-implication-item  {
        background-color: rgba(255,255,255,0.6);
        padding: 10px 15px;
        border-radius: 10px;
        margin-bottom: 10px;
      }
      .logic-index-word-implication-item-answer {
        background-color: rgb(100, 235, 199,0.6);
      }
      .logic-index-word-implication-item-errAnswer {
        background-color: rgb(218, 152, 152,0.6);
        animation-delay: 0s;
        animation-duration: .5s;
        animation-iteration-count: 1;
        animation-name: shake-horizontal;
        animation-play-state: running;
        animation-timing-function: ease-in-out;
      }
    }
    @keyframes shake-horizontal {
      0% {
          transform: translate(0,0) rotate(0deg);
      }


      2% {
          transform: translate(-4px,0) rotate(0deg);
      }


      4% {
          transform: translate(2px,0) rotate(0deg);
      }


      6% {
          transform: translate(-3px,0) rotate(0deg);
      }


      8% {
          transform: translate(9px,0) rotate(0deg);
      }


      10% {
          transform: translate(2px,0) rotate(0deg);
      }


      12% {
          transform: translate(-6px,0) rotate(0deg);
      }


      14% {
          transform: translate(-7px,0) rotate(0deg);
      }


      16% {
          transform: translate(2px,0) rotate(0deg);
      }


      18% {
          transform: translate(7px,0) rotate(0deg);
      }


      20% {
          transform: translate(-1px,0) rotate(0deg);
      }


      22% {
          transform: translate(-10px,0) rotate(0deg);
      }


      24% {
          transform: translate(-10px,0) rotate(0deg);
      }


      26% {
          transform: translate(3px,0) rotate(0deg);
      }


      28% {
          transform: translate(-5px,0) rotate(0deg);
      }


      30% {
          transform: translate(4px,0) rotate(0deg);
      }


      32% {
          transform: translate(-6px,0) rotate(0deg);
      }


      34% {
          transform: translate(-2px,0) rotate(0deg);
      }


      36% {
          transform: translate(-6px,0) rotate(0deg);
      }


      38% {
          transform: translate(-2px,0) rotate(0deg);
      }


      40% {
          transform: translate(4px,0) rotate(0deg);
      }


      42% {
          transform: translate(8px,0) rotate(0deg);
      }


      44% {
          transform: translate(-3px,0) rotate(0deg);
      }


      46% {
          transform: translate(-10px,0) rotate(0deg);
      }


      48% {
          transform: translate(4px,0) rotate(0deg);
      }


      50% {
          transform: translate(-6px,0) rotate(0deg);
      }


      52% {
          transform: translate(6px,0) rotate(0deg);
      }


      54% {
          transform: translate(-8px,0) rotate(0deg);
      }


      56% {
          transform: translate(5px,0) rotate(0deg);
      }


      58% {
          transform: translate(9px,0) rotate(0deg);
      }


      60% {
          transform: translate(7px,0) rotate(0deg);
      }


      62% {
          transform: translate(1px,0) rotate(0deg);
      }


      64% {
          transform: translate(2px,0) rotate(0deg);
      }


      66% {
          transform: translate(-2px,0) rotate(0deg);
      }


      68% {
          transform: translate(-7px,0) rotate(0deg);
      }


      70% {
          transform: translate(-1px,0) rotate(0deg);
      }


      72% {
          transform: translate(-6px,0) rotate(0deg);
      }


      74% {
          transform: translate(5px,0) rotate(0deg);
      }


      76% {
          transform: translate(0,0) rotate(0deg);
      }


      78% {
          transform: translate(9px,0) rotate(0deg);
      }


      80% {
          transform: translate(-3px,0) rotate(0deg);
      }


      82% {
          transform: translate(8px,0) rotate(0deg);
      }


      84% {
          transform: translate(-2px,0) rotate(0deg);
      }


      86% {
          transform: translate(-1px,0) rotate(0deg);
      }


      88% {
          transform: translate(-3px,0) rotate(0deg);
      }


      90% {
          transform: translate(4px,0) rotate(0deg);
      }


      92% {
          transform: translate(0,0) rotate(0deg);
      }


      94% {
          transform: translate(4px,0) rotate(0deg);
      }


      96% {
          transform: translate(2px,0) rotate(0deg);
      }


      98% {
          transform: translate(-2px,0) rotate(0deg);
      }
    }
    .logic-index-word {
      padding-top: 20px;
      .logic-index-word-name {
        display: flex;
        align-items: center;
        .logic-index-word-text {
          font-size: 22px;
          font-weight: bold;
          margin-right: 10px;
          line-height: 1;
        }
      }
      .logic-index-word-tips {
        font-size: 16px;
        margin-top: 20px;
        color: #999;
      }
      .logic-index-word-implication {
        font-size: 16px;
        margin-top: 20px;
        font-weight: bold;
      }
    }
    .logic-index-expamle {
      height: 120px;
      background-color: rgba(255,255,255,0.6);
      padding: 10px 10px;
      border-radius: 5px;
      font-size: 16px;
      color: #666;
      margin: 20px 0;
    }
    .logic-index-synonym-list {
      background-color: rgba(255,255,255,0.6);
      padding: 10px 10px;
      border-radius: 5px;
      font-size: 16px;
      .logic-index-synonym-item {
        padding-bottom: 2px;
        .logic-index-synonym-item-name  {
          font-weight: bold;
        }
        .logic-index-synonym-item-implication {
          color: #666;
        }
      }
    }
    .logic-index-list-footer {
      position: fixed;
      bottom: 50px;
      right: 0;
      left: 0;
      text-align: center;
      font-weight: bold;
    }
  }
}
</style>
<template>
  <div class="page">
    <div v-if="wordDetail.connectiveList.length > 0" class="logic-index-box">
      <div class="logic-index-header" @click="viewList">
        已学习：{{ studycount }}/{{ allcount }} 组，查看
      </div>
      <div class="logic-index-word-name-list">
        <div  v-for="(item, index) in nameList"  :key="index" class="logic-index-word-name-item {{item.isCurrent && isRight === '2' ? 'logic-index-word-name-item-answer' : ''}} {{item.isCurrent && isRight === '3' ? 'logic-index-word-name-item-errAnswer' : ''}}" :class="{'logic-index-word-name-item-isCurrent': item.isCurrent}">{{item.name}}</div>
      </div>
      <div class="logic-index-word-implication-list">
        <div v-for="(item, index) in implicationList"  :key="index" @click="chooseOption(item)" class="logic-index-word-implication-item {{item.isRightType === '2' ? 'logic-index-word-implication-item-answer' : ''}} {{item.isRightType === '3' ? 'logic-index-word-implication-item-errAnswer' : ''}}">{{item.implication}}</div>
      </div>
    </div>
    <van-dialog id="van-dialog" custom-class="logic-index-content-dialog"/>
  </div>
</template>
<config>
  {
    navigationBarTitleText: '词语含义',
    usingComponents: {
      "van-rate": "../../libs/vant/rate/index",
      "van-dialog": "../../libs/vant/dialog/index",
    }
  }
</config>
<script>
  import wepy from '@wepy/core'
  import store from '@/store'
  import { mapGetters } from '@wepy/x'
  import Dialog from '../../libs/vant/dialog/dialog';
  import { getWordByRandom, upDateWordsEvaluation, getSentenceById, getAllEvaluationWordsCount } from '@/api/words'
  import { getWordGroupRandom, getAllEvaluationWordGroupCount, upDateWordGroupEvaluation, getWordGroupEvaDetail } from '@/api/wordGroup'
  import * as wordGroup from '@/utils/wordGroup'
  wepy.page({
    store,
    computed: {
      // 用户信息
      ...mapGetters(['user', '_id', 'idiomGroupList', 'notionalGroupList'])
    },
    data: {
      allcount: 0,
      studycount: 0,
      wordDetail: {},
      nameList: [],
      implicationList: [],
      word_type: '',
      isRight: '1',
      isAllRight: true, // 有一个错误选项时 为false 否则为True
      allList: []
    },
    async onLoad(options) {
      console.log(options)
      this.word_type = options.type
      wx.showLoading({title: '加载中'})
      this.getAllEvaluationWordGroupCount()
      await this.getWordGroupRandom()
      wx.hideLoading()
    },
    onShow() {
      this.showPrivacy = true
    },
    onHide() {
      this.showPrivacy = false
    },
    methods: {
      toMember () {
        wx.navigateTo({
          url: `../member/pages/index`,
        })
      },
      // 随机获取一个成语/实词的ID
      async getWordGroupRandom() {
        this.isAllRight = true //初始化答题状态
        console.log(this.word_type, '=========')
        this.allList = JSON.parse(JSON.stringify(this.word_type === '1' ? this.idiomGroupList : this.notionalGroupList))
        this.allList = this.allList.filter(item=> item.isEvaluation === '2')
        this.allList = this.shuffle(this.allList)
        console.log(this.allList)

        let result = await getWordGroupEvaDetail({
          word_group_id: this.allList[0]._id,
        })
        console.log(result, '=======')
        this.wordDetail = result.result
        let tempImplicationList = []
        console.log(this.wordDetail, '=======')
        this.wordDetail.connectiveList.map(item => {
          // item.isCurrent = false
          // item.isRightType = '1' // 1未选 2正确 3错误
          this.nameList.push({
            name: item.name,
            _id: item._id,
            isCurrent: false
          })
          tempImplicationList.push({
            implication: item.implication,
            _id: item._id,
            isRightType: '1'
          })
        })
        this.implicationList = this.shuffle(tempImplicationList)
        this.nameList[0].isCurrent = true
        if(this.user.isMember !== '1') {
          if (this.studycount > 5) {
            Dialog.confirm({
              message: '普通用户可以免费体验5个词组评测，开通会员解锁所有词组评测',
              confirmButtonText: '立即开通'
            }).then(async () => {
              wx.navigateTo({
                url: `../member/pages/index`,
              })
            }).catch(() => {
              wx.navigateBack({
                delta: 1
              })
            });
          }
        }
      },
      async getAllEvaluationWordGroupCount() {
        let result = await getAllEvaluationWordGroupCount({
          user_id: this._id,
          word_type: this.word_type
        })
        this.allcount = result.result.allcount
        this.studycount = result.result.studycount
      },
      async chooseOption (option) {
        if(this.user.isMember !== '1') {
          if (this.studycount > 10) {
            this.toMember()
            return
          }
        }
        //初始化所有选项
        this.implicationList = this.implicationList.map(item => {
          item.isRightType = '1' // 1未选 2正确 3错误
          return item
        })
        //获取当前成语的Id
        let index = this.nameList.findIndex(item => item.isCurrent)
        let currentId = this.nameList[index]._id
        // 获取选择成语的chooseIndex
        let chooseIndex = this.implicationList.findIndex(item => item._id === option._id)
        console.log(chooseIndex)
        if (option._id === currentId) {
          this.implicationList[chooseIndex].isRightType = '2'
          this.isRight = '2'
          setTimeout(async ()=>{
            this.implicationList.splice(chooseIndex,1)
            this.nameList.splice(index,1)
            if (this.nameList.length > 0) {
              this.nameList[0].isCurrent = true
            }
            if(this.implicationList.length <= 0){
              wx.showLoading({title: '加载中'})
              await upDateWordGroupEvaluation({
                word_group_id: this.wordDetail._id,
                user_id: this._id,
                word_type: this.word_type,
                isAllRight: this.isAllRight
              })
              this.reflashWordGroupList(this.word_type === '1' ? this.idiomGroupList : this.notionalGroupList)
              this.studycount += 1
              await this.getWordGroupRandom()
              this.isAllRight = true
              wx.hideLoading()
            }
          }, 500)
        } else {
          this.implicationList[chooseIndex].isRightType = '3'
          this.isRight = '3'
          this.isAllRight = false
        }
      },
      reflashWordGroupList (arr) {
        let indexTemp = arr.findIndex(item => item._id === this.wordDetail._id)
        arr[indexTemp].isEvaluation = '1'
        if (this.type === '1') {
          this.$store.commit('setIdiomGroupList', arr)
          wordGroup.setIdiomGroupList(arr)
        } else {
          this.$store.commit('setNotionalGroupList', arr)
          wordGroup.setNotionalGroupList(arr)
        }
      },
      // 数组乱序
      shuffle (array) {
        var j, x, i;
        for (i = array.length; i; i--) {
          j = Math.floor(Math.random() * i);
          x = array[i - 1];
          array[i - 1] = array[j];
          array[j] = x;
        }
        return array;
      },
      async viewList () {
        wx.navigateTo({
            url: `/pages/words/evaluationList?word_type=${this.word_type}`
        })
      }
    }
  })
</script>
