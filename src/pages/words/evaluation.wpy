<style lang="less">
.page{
  background-image: url('https://7072-prod-2gzhco766f4e1e27-1304834920.tcb.qcloud.la/index/word-bg.jpeg?sign=269ddf3c0ca16b660380afa03cb7c172&t=1696360119');
  // background-color: #F5F7FB;
  height: auto;
  .logic-index-box {
    padding: 20px 20px;
    padding-bottom: 100px;
    .logic-index-header {
      color: #666;
    }
    .logic-index-word {
      padding-top: 20px;
      .logic-index-word-name {
        display: flex;
        align-items: center;
        .logic-index-word-text {
          font-size: 22px;
          font-weight: bold;
          margin-right: 10px;
          line-height: 1;
        }
      }
      .logic-index-word-tips {
        font-size: 16px;
        margin-top: 20px;
        color: #999;
      }
      .logic-index-word-implication {
        font-size: 16px;
        margin-top: 20px;
        font-weight: bold;
      }
    }
    .logic-index-implication-list {
      margin-top: 60px;
      .logic-index-implication-item  {
        background-color: rgba(255,255,255,0.6);
        padding: 10px 15px;
        border-radius: 10px;
        margin-bottom: 10px;
      }
      .logic-index-implication-item-answer {
        background-color: rgb(100, 235, 199,0.6);
      }
      .logic-index-implication-item-errAnswer {
        background-color: rgb(218, 152, 152,0.6);
      }
    }
    .logic-index-expamle {
      height: 120px;
      background-color: rgba(255,255,255,0.6);
      padding: 10px 10px;
      border-radius: 5px;
      font-size: 16px;
      color: #666;
      margin: 20px 0;
    }
    .logic-index-synonym-list {
      background-color: rgba(255,255,255,0.6);
      padding: 10px 10px;
      border-radius: 5px;
      font-size: 16px;
      .logic-index-synonym-item {
        padding-bottom: 2px;
        .logic-index-synonym-item-name  {
          font-weight: bold;
        }
        .logic-index-synonym-item-implication {
          color: #666;
        }
      }
    }
    .logic-index-list-footer {
      position: fixed;
      bottom: 50px;
      right: 0;
      left: 0;
      text-align: center;
      font-weight: bold;
    }
  }
}
</style>
<template>
  <div class="page">
    <div v-if="wordDetail.name" class="logic-index-box">
      <div class="logic-index-header" @click="viewList">
        已学习：{{ studycount }}/{{ allcount }} ，已掌握 {{ readycount }}/{{ allcount }} ，查看
      </div>
      <div class="logic-index-word">
        <div class="logic-index-word-name">
          <div class="logic-index-word-text">{{wordDetail.name}}</div>
          <van-rate style="line-height: 1;" icon="thumb-circle" void-icon="circle" size="22" readonly value="{{ wordDetail.evaluationData.rightCount }}" count="{{ 3 }}"/>
        </div>
        <div v-if="active === '1'" class="logic-index-word-tips">先想想词义再选择</div>
        <div v-if="active === '2'"  class="logic-index-word-implication">{{wordDetail.implication}}</div>
      </div>
      <div v-if="active === '1'" class="logic-index-implication-list">
        <div v-for="(item, index) in wordDetail.option" :key="index" class="logic-index-implication-item {{isSelected && wordDetail.implication === item ? 'logic-index-implication-item-answer' : ''}} {{isSelected && yourChoose === item && wordDetail.implication != item ? 'logic-index-implication-item-errAnswer' : ''}}" @click="chooseOption(item)">
          {{item}}
        </div>
      </div>
      <div v-if="active === '2'">
        <swiper class="logic-index-expamle" indicator-dots="{{true}}" duration="{{500}}">
          <block v-if="sentenceList.length > 0">
            <swiper-item v-for="(item, index) in sentenceList" :key="index">
              <div class="swiper-item">{{item.content}}</div>
            </swiper-item>
          </block>
          <block v-else>
            <swiper-item>
              <div class="swiper-item">部分例句正在补充中，敬请期待</div>
            </swiper-item>
          </block>
        </swiper>
      </div>
      <div v-if="active === '2'" class="logic-index-synonym-list">
        <div class="logic-index-synonym-item" v-for="(item, index) in wordDetail.synonymList" :key="index">
          <text class="logic-index-synonym-item-name">{{item.name}}：</text>
          <text class="logic-index-synonym-item-implication">{{item.implication}}</text>
        </div>
      </div>
      <div class="logic-index-list-footer">
        <div v-if="active === '1'" @click="viewAnswer">{{isSelected ? '继续' : '看答案'}}</div>
        <div v-if="active === '2'" @click="nextWord">下一词</div>
      </div>
    </div>
    <van-dialog id="van-dialog" custom-class="logic-index-content-dialog"/>
    <pay-tip-popup :tipsShow="tipsShow" @closePayPopup="closePayPopup"></pay-tip-popup>
    <privacy-dialog id="pay-tip-popup-6" wx:if="{{showPrivacy}}" />
  </div>
</template>
<config>
  {
    navigationBarTitleText: '词语含义',
    usingComponents: {
      "van-rate": "../../libs/vant/rate/index",
      "pay-tip-popup": "~@/components/pay-tip-popup",
      "van-dialog": "../../libs/vant/dialog/index",
    }
  }
</config>
<script>
  import wepy from '@wepy/core'
  import store from '@/store'
  import { mapGetters } from '@wepy/x'
  import eventHub from '@/common/eventHub'
  import Dialog from '../../libs/vant/dialog/dialog';
  import { getWordByRandom, upDateWordsEvaluation, getSentenceById, getAllEvaluationWordsCount } from '@/api/words'
  wepy.page({
    store,
    computed: {
      // 用户信息
      ...mapGetters(['user', '_id'])
    },
    data: {
      active: '1',
      wordDetail: {},
      allcount: 0,
      studycount: 0,
      readycount: 0,
      sentenceList: [],
      yourChoose: '',
      isSelected: false,
      isRight: false,
      indicatorDots: true,
      duration: 500,
      tipsShow: false,
      showPrivacy: false
    },
    async onLoad() {
      await this.getWordsDetail()
    },
    onShow() {
      this.showPrivacy = true
    },
    onHide() {
      this.showPrivacy = false
    },
    methods: {
      openPayTipPopup () {
        this.tipsShow = true
      },
      closePayPopup () {
        this.tipsShow = false
      },
      // 获取单个词语
      async getWordsDetail() {
        wx.showLoading({title: '加载中'})
        let result = await getWordByRandom({
          user_id: this._id
        })
        this.wordDetail = result.result
        console.log(this.wordDetail,'============')
        await this.getWordsCount()
        await this.getSentenceList(this.wordDetail._id)
        wx.hideLoading()
        if(this.user.isMember === '2') {
          if (this.studycount > 10) {
            Dialog.confirm({
              message: '普通用户可以免费体验10个成语评测，开通会员解锁所有成语评测',
              confirmButtonText: '立即开通'
            }).then(async () => {
              this.openPayTipPopup()
            }).catch(() => {
              wx.navigateBack({
                delta: 1
              })
            });
          }
        }
      },
      async getWordsCount() {
        let result = await getAllEvaluationWordsCount({
          user_id: this._id
        })
        this.allcount = result.result.allcount
        this.studycount = result.result.studycount
        this.readycount = result.result.readycount
      },
      // 获取例句
       async getSentenceList(id) {
        let result = await getSentenceById({
          word_id: id
        })
        this.sentenceList = result.result.sentence
        console.log(this.sentenceList)
      },
      async chooseOption (item) {
        if(this.user.isMember === '2') {
          if (this.studycount > 10) {
            this.openPayTipPopup()
            return
          }
        }
        if(!this.isSelected) {
          this.yourChoose = item
          this.isRight = this.wordDetail.implication === item
          this.isSelected = true
          if(this.isRight){
            this.wordDetail.evaluationData.rightCount += 1
          }
          await upDateWordsEvaluation({
            word_id: this.wordDetail._id,
            user_id: this._id,
            isRight: this.isRight
          })
        }
      },
      async viewAnswer () {
        if(this.user.isMember === '2') {
          if (this.studycount > 10) {
            this.openPayTipPopup()
            return
          }
        }
        if(!this.isSelected) {
          this.isRight = false
          this.isSelected = true
          await upDateWordsEvaluation({
            word_id: this.wordDetail._id,
            user_id: this._id,
            isRight: this.isRight
          })
        } else {
          this.active = '2'
        }
      },
      async nextWord () {
        if(this.user.isMember === '2') {
          if (this.studycount > 10) {
            this.openPayTipPopup()
            return
          }
        }
        this.wordDetail = {}
        this.active = '1'
        this.isSelected = false
        await this.getWordsDetail()
      },
      async viewList () {
        wx.navigateTo({
            url: `/pages/words/evaluationList`
        })
      }
    }
  })
</script>
