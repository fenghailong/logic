<style lang="less">
.page{
  background-color: #eee;
  .logic-index-box {
    padding: 20px 20px;
    .logic-index-item {
      background-color: #fff;
      height: 70vh;
      border-radius: 20px;
      padding: 0 20px;
      overflow: auto;
      .logic-index-item-name {
        padding: 10px;
        font-size: 30px;
        text-align: center;
      }
      .logic-index-item-tag {
        display: flex;
        align-items: center;
        .logic-index-item-count {
          line-height: 1;
          font-size: 14px;
          color: #999;
          margin-right: 30px;
        }
        van-tag {
          line-height: 1;
          margin-right: 10px;
        }
        van-rate {
          line-height: 1;
        }
      }
      .logic-index-item-implication {
        display: flex;
        align-items: flex-start;
        margin-top: 20px;
        .logic-index-item-implication-info {
          font-size: 14px;
          color: #666;
          width: 80%;
        }
        van-tag {
          line-height: 1;
          margin-right: 10px;
        }
      }
      .logic-index-item-synonym {
        display: flex;
        align-items: flex-start;
        margin-top: 20px;
        .logic-index-item-synonym-list {
          font-size: 14px;
          color: #999;
          width: 80%;
          display: flex;
          flex-direction: column;
          .logic-index-item-synonym-item {
            margin-bottom: 5px;
            .logic-index-item-synonym-item-name {
              color: #000;
            }
            .logic-index-item-synonym-item-implication {
              font-size: 14px;
            }
          }
        }
        van-tag {
          line-height: 1;
          margin-right: 10px;
        }
        .logic-index-item-synonym-nodata {
          font-size: 14px;
          color: #999;
        }
      }
      .logic-index-item-title {
        text-align: right;
        font-size: 16px;
        padding: 0 20px;
        color: #999;
      }
      .logic-index-item-introduce {
        font-size: 18px;
        padding: 0 10px;
        margin-top: 10px;
        color: #666;
      }
      .logic-index-item-tag-person {
        font-size: 18px;
        padding: 0 10px;
        margin-top: 10px;
        font-weight: 500;
      }
      .logic-index-item-name-article {
        padding: 10px;
        font-size: 20px;
        text-align: center;
      }
      .logic-index-item-title-article {
        text-align: right;
        font-size: 14px;
        padding: 0 20px;
        color: #999;
      }
      .logic-index-item-introduce-article {
        font-size: 14px;
        padding: 0 10px;
        margin-top: 10px;
        color: #666;
      }
    }
    .logic-index-list-footer {
      display: flex;
      align-items: center;
      justify-content: space-around;
      margin-top: 30px;
    }
  }
  .logic-index-list-popup-list {
    padding: 20px 40px 10px;
    overflow: auto;
    .logic-index-list-popup-item {
      display: flex;
      align-items: center;
      padding: 10px 0;
      border-bottom: 1px solid #eee;
      .logic-index-list-popup-index {
        margin-right: 50px;
        color: #2fcebe;
      }
      .logic-index-list-popup-words {
        flex: 1;
      }
      .logic-index-list-popup-words-title {
        flex: 1;
        font-size: 14px;
      }
    }
  }
}
</style>
<template>
  <div class="page">
    <div class="logic-index-box">
      <div class="logic-index-item">
        <div class="logic-index-item-name">{{wordDetail.name}}</div>
        <div class="logic-index-item-implication">
          <van-tag type="primary">含义</van-tag>
          <div class="logic-index-item-implication-info">{{wordDetail.implication}}</div>
        </div>
        <div class="logic-index-item-synonym">
          <van-tag type="primary">关联</van-tag>
          <div v-if = "wordDetail.synonymList.length > 0" class="logic-index-item-synonym-list">
            <div class="logic-index-item-synonym-item" v-for="(item, index) in wordDetail.synonymList" :key="index">
              <text class="logic-index-item-synonym-item-name">{{item.name}}：</text>
              <text class="logic-index-item-synonym-item-implication">{{item.implication}}</text>
            </div>
          </div>
          <div v-else class="logic-index-item-synonym-nodata">无关联词语</div>
        </div>
      </div>
      <div class="logic-index-list-footer">
        <van-button round type="info" @click="previousWord">上一个</van-button>
        <van-button round type="info" @click="showListPopup">列表</van-button>
        <van-button round type="info" @click="nextWord">下一个</van-button>
      </div>
    </div>
    <van-popup @click-overlay="clickOverlay" :show="showPopup" position="bottom" round>
      <div class="logic-index-list-popup-list" :style="{ height: '70vh' }">
        <div class="logic-index-list-popup-item" v-for="(item, index) in allList" :key="index" @click="toWords(item._id)">
          <div class="logic-index-list-popup-index">{{index + 1}}</div>
          <div class="logic-index-list-popup-words">{{item.name}}</div>
          <van-tag v-if="item.isStudyed" type="primary" size="medium">已学</van-tag>
          <van-tag v-else type="primary" plain color="#999999" size="medium">未学</van-tag>
        </div>
      </div>
    </van-popup>
  </div>
</template>
<config>
  {
    navigationBarTitleText: '词语辨析',
    usingComponents: {
      "van-rate": "../../libs/vant/rate/index",
      "van-tag": "../../libs/vant/tag/index",
      "van-button": "../../libs/vant/button/index",
      "van-popup": "../../libs/vant/popup/index"
    }
  }
</config>
<script>
  import wepy from '@wepy/core'
  import store from '@/store'
  import { mapGetters } from '@wepy/x'
  import eventHub from '@/common/eventHub'
  import { getWordList, getWordsDetail, getCurrenStudyWordId } from '@/api/words'
  import { reflashUserCount } from '@/api/user'

  wepy.page({
    store,
    computed: {
      // 用户信息
      ...mapGetters(['_id'])
    },
    data: {
      allList: [],
      showPopup: false,
      wordDetail: {},
      currentWord_id: '',
      type: ''
    },
    async onLoad(options) {
      this.type = Number(options.type)
      wx.showLoading({title: '加载中'})
      await this.getWordGroupList()
      await this.getCurrenStudyWordId()
      await this.getWordsDetail(this.currentWord_id)
      wx.hideLoading()
    },
    methods: {
      async getWordGroupList() {
        let result = await getWordList({
          user_id: this._id
        })
        this.allList = result.result.data.idiomList
      },
      async getCurrenStudyWordId() {
        let result = await getCurrenStudyWordId({
          user_id: this._id
        })
        console.log(result, '======')
        // this.allList = result.result.data.idiomWordId
        this.currentWord_id = result.result.data.idiomWordId
      },
      // 获取单个词语
      async getWordsDetail(word_id) {
        let result = await getWordsDetail({
          user_id: this._id,
          word_id: word_id,
          word_type: String(this.type)
        })
        this.wordDetail = result.result
        this.currentWord_id = this.wordDetail._id
        let index = this.allList.findIndex((item) => item._id == this.currentWord_id)
        this.allList[index].isStudyed = true
      },
      async reflashUserCount() {
        await reflashUserCount({
          user_id: this._id,
          type: this.type
        })
      },
      async nextWord () {
        let nextIndex = 0
        let index = this.allList.findIndex((item) => item._id == this.currentWord_id)
        nextIndex = index + 1
        if (nextIndex > (this.allList.length - 1)) {
          wx.showToast({
            title: '已经是最后一个了',
            icon: 'success'
          })
        } else {
          wx.showLoading({title: '加载中'})
          await this.getWordsDetail(this.allList[nextIndex]._id)
          wx.hideLoading()
        }
      },
      async previousWord () {
        let previousIndex = 0
        let index = this.allList.findIndex((item) => item._id == this.currentWord_id)
        previousIndex = index - 1
        if (previousIndex < 0) {
          wx.showToast({
            title: '前面已经没有了',
            icon: 'success'
          })
        } else {
          wx.showLoading({title: '加载中'})
          await this.getWordsDetail(this.allList[previousIndex]._id)
          wx.hideLoading()
        }
      },
      async toWords (id) {
        this.showPopup = false
        await this.getWordsDetail(id)
      },
      async showListPopup () {
        this.showPopup = !this.showPopup
      },
      clickOverlay () {
        this.showPopup = false
      }
    }
  })
</script>
