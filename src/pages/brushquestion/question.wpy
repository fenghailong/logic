<style lang="less">
.page{
  background-color: #eee;
  position: relative;
  .logic-index-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background-color: #387ffb;
    padding: 5px 15px;
    color: #fff;
    line-height: 1;
  }
  .logic-index-header-title {
    margin-bottom: 10px;
  }
  .logic-index-header-box {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-bottom: 5px;
    .logic-index-header-left {
    }
    .logic-index-header-middle {
      display: flex;
      align-items: center;
      .logic-index-header-time {
        margin-left: 10px;
      }
    }
    .logic-index-header-right {
    }
  }
  .logic-index-box {
    // padding: 20px 20px;
    // position: relative;
    padding-top: 30px;
    .logic-index-question-list {
      display: flex;
      flex-direction: column;
      // align-items: center;
      margin-top: 10px;
      background-color: #fff;
      font-size: 16px;
      padding: 15px;
      // transition: all 2s ease-in-out;
      .van-radio {
        padding: 5px 0;
        .van-radio__label {
          line-height: 26px;
        }
      }
    }
  }
  .logic-index-canvas {
    position: fixed;
    top: 0;
    height: 0;
    width: 0;
    // overflow: hidden;
    // background: #fff;
    background-color:rgba(0, 0, 0, 0.1);
  }
  .logic-index-canvas-close {
    overflow: hidden;
  }
  .logic-index-complete {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 50px;
    height: 50px;
    line-height: 50px;
    text-align: center;
    color: #fff;
    background-color: #387ffb;
    border-radius: 50px;
  }
  .logic-index-pen {
    position: fixed;
    bottom: 20px;
    right: 80px;
    width: 50px;
    height: 50px;
    line-height: 50px;
    text-align: center;
    color: #fff;
    background-color: #387ffb;
    border-radius: 50px;
  }
  .logic-index-popup-box {
    padding: 20px;
    text-align: center;
  .logic-index-popup-title{
    padding: 0 0 10px;
  }
  .logic-index-popup-list {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    .logic-index-popup-item {
      width: 30px;
      height: 30px;
      line-height: 30px;
      text-align: center;
      color: #fff;
      background-color: #387ffb;
      border-radius: 30px;
      margin-right: 10px;
    }
    .logic-index-popup-item-empty {
      width: 30px;
      height: 30px;
      line-height: 30px;
      text-align: center;
      background-color: #666;
      border-radius: 30px;
      margin-right: 10px;
    }
  }
  .logic-index-popup-button{
    margin-top: 20px;
    .van-button {
      width: 60%;
    }
  }
}
}
</style>
<template>
  <!-- <page-meta page-style="overflow: {{disableScroll ? 'hidden' : 'visible'}}" /> -->
  <div class="page">
    <div class="logic-index-header">
      <div class="logic-index-header-box">
        <div class="logic-index-header-left">专项练习</div>
        <div class="logic-index-header-middle">
          <van-icon name="underway-o" size="16px" />
          <div class="logic-index-header-time">{{nowTime}}</div>
        </div>
        <div class="logic-index-header-right">共 {{questionList.length}} 题</div>
      </div>
    </div>
    <div class="logic-index-box">
      <div v-if="questionList.length > 0" v-for="(item, index) in questionList" :key="index" class="logic-index-question-list">
        <van-tag v-if="item.exa_type === '1'" type="primary" size="large" style="margin-bottom: 5px">{{index+1}}.单选题</van-tag>
        <van-tag v-else-if="item.exa_type === '2'" type="primary" size="large" style="margin-bottom: 5px">{{index+1}}.多选题</van-tag>
        <question-item style="flex:1;" :questionItem="item" :questionIndex="index" @onChange="onChange" @onMoreChange="onMoreChange"></question-item>
      </div>
    </div>
    <div v-if="disableScroll" class="logic-index-complete" @click="closeCanvasPen">关</div>
    <div v-if="disableScroll" class="logic-index-pen" @click="clearCanvasPen">清</div>
    <div v-if="!disableScroll" class="logic-index-pen" @click="openCanvasPen">笔</div>
    <div v-if="!disableScroll" class="logic-index-complete" @click="openCompletePopup">交卷</div>
    <van-popup get-container="#app" @click-overlay="closeCompletePopup" :show="isCompleteShow" position="bottom">
      <div class="logic-index-popup-box" :style="{ height: '30vh' }">
        <div class="logic-index-popup-title">交卷提示</div>
        <div class="logic-index-popup-list">
          <div v-if="questionList.length > 0" v-for="(item, index) in questionList" :key="index">
            <div class="logic-index-popup-item" :class="{ 'logic-index-popup-item-empty': item.youAnswer == '' }">
              {{index + 1}}
            </div>
          </div>
        </div>
        <div class="logic-index-popup-button">
          <van-button round type="info" @click="doSubmit">立刻交卷</van-button>
        </div>
      </div>
    </van-popup>
    <div class="logic-index-canvas" :class="{ 'logic-index-canvas-close': !disableScroll}">
      <canvas style="height: 90vh; width:100vw" canvas-id="canvas" disable-scroll="true" @touchstart="canvasStart" @touchmove="canvasMove" @touchend="touchEnd"></canvas>
      <!-- <canvas v-else style="height: 0; width:0" id="canvas" type="2d" disable-scroll="true"></canvas> -->
    </div>
    <van-dialog id="van-dialog" custom-class="logic-index-content-dialog"/>
  </div>
</template>
<config>
  {
    navigationBarTitleText: '专项刷题',
    pageOrientation: "auto",
    usingComponents: {
      "van-tag": "../../libs/vant/tag/index",
      "van-icon": "../../libs/vant/icon/index",
      "van-button": "../../libs/vant/button/index",
      "van-popup": "../../libs/vant/popup/index",
      "van-dialog": "../../libs/vant/dialog/index",
      "question-item": "~@/components/question-item"
    }
  }
</config>
<script>
  import wepy from '@wepy/core'
  import store from '@/store'
  import { mapGetters } from '@wepy/x'
  import eventHub from '@/common/eventHub'
  import { getQuestionBymodule, getPractiseById, addPractise, updatePractise, addQuestionRecord} from '@/api/question'
  import Dialog from '../../libs/vant/dialog/dialog';
  var context = null; // 使用 wx.createContext 获取绘图上下文 context
  var mCanvas = null;
  wepy.page({
    store,
    computed: {
      // 用户信息
      ...mapGetters(['_id'])
    },
    data: {
      practiseId: '', //练习id
      examinationId: '', //试卷id
      parentmoudleId: '', //传入参数的父模块Id
      moudleId: '', //传入参数 模块id
      title: '', //传入参数 模块名
      questionList: [], //题目列表
      isComplete: '2', //是否已完成
      isCompleteShow: false, //是否交卷弹窗
      timer2: null, // 计时器
      nowTime: '00:00', // 计时
      minutes: 0,
      seconds: 0,
      disableScroll: false, //默认没有画
    },
    async onLoad(options) {
      this.moudleId = options.moudleId
      this.parentmoudleId = options.parentmoudleId
      this.examinationId = options.examinationId
      this.practiseId = options.practiseId
      this.title = options.title
      //获得Canvas的上下文
      context = wx.createCanvasContext('canvas');
      //设置线的颜色
      context.setStrokeStyle("#FF0000");
      //设置线的宽度
      context.setLineWidth(2);
      //设置线两端端点样式更加圆润
      context.setLineCap('round');
      //设置两条线连接处更加圆润
      context.setLineJoin('round');
      // wx.createSelectorQuery()
      // .select('#canvas') // 在 WXML 中填入的 id
      // .fields({
      //   node: true,
      //   size: true
      // })
      // .exec((res) => {
      //   // Canvas 对象
      //   const canvas = res[0].node
      //   mCanvas = res[0].node
      //   context = canvas.getContext('2d')
      //   // Canvas 画布的实际绘制宽高
      //   const width = res[0].width
      //   const height = res[0].height
      //   // 初始化画布大小
      //   const dpr = wx.getWindowInfo().pixelRatio
      //   console.log(dpr)
      //   canvas.width = width * dpr
      //   canvas.height = height * dpr
      //   console.log(canvas.width, canvas.height)
      //   context.scale(dpr, dpr)
      // })
      wx.setNavigationBarTitle({title: options.title})
    },
    async onShow() {
      wx.showLoading({title: '加载中'})
      await this.getQuestionsList()
      wx.hideLoading()
      if (this.timer2) {
        clearInterval(this.timer2)
      }
      this.timer2 = setInterval(() => {
        this.seconds += 1
        if (this.seconds >= 60) {
          this.seconds = 0
          this.minutes = this.minutes + 1
        }
        this.nowTime = `${this.toZero(this.minutes) + ':' + this.toZero(this.seconds)}`
      }, 1000)
    },
    async onHide() {
      if (this.questionList.length > 0) {
        await updatePractise ({
          practise_id: this.practiseId,
          isComplete: this.isComplete,
          questions: this.questionList,
          useTime: this.nowTime,
        })
      }
      clearInterval(this.timer2) // 清空计时器
    },
    async onUnload() {
      if (this.questionList.length > 0) {
        wx.showLoading({title: '保存练习'})
        await updatePractise ({
          practise_id: this.practiseId,
          isComplete: this.isComplete,
          questions: this.questionList,
          useTime: this.nowTime,
        })
        wx.hideLoading()
      }
      if (this.parentmoudleId) {
        eventHub.$emit('refresh-brushquestion-list', this.parentmoudleId);
      }
      clearInterval(this.timer2)
    },
    methods: {
      openCanvasPen () {
        this.disableScroll = true
        wx.setPageStyle({
          style: {
            overflow: 'hidden'
          }
        })
      },
      clearCanvasPen() {
        context.clearRect(0, 0, 5000, 5000); //清除画布
        context.draw(true);
        // context.beginPath() //清空画笔
      },
      closeCanvasPen() {
        this.disableScroll = false
        this.clearCanvasPen()
        wx.setPageStyle({
          style: {
            overflow: 'visible'
          }
        })
      },
      touchEnd () {},
      // 画布绘制
      canvasStart (event) {
        if(this.disableScroll) {
          context.moveTo(event.touches[0].clientX, event.touches[0].clientY);
        }
      },
      //过程
      canvasMove (event) {
        if(this.disableScroll) {
          var x = event.touches[0].clientX;
          var y = event.touches[0].clientY;
          context.lineTo(x, y)
          context.stroke()
          context.draw(true)
          context.moveTo(x, y)
        }
      },
      openCompletePopup () {
        this.isCompleteShow = true
      },
      closeCompletePopup() {
        this.isCompleteShow = false
      },
      // 选中题目
      onChange(item,key,index) {
        this.questionList[index].youAnswer = key
        this.questionList[index].isRight = key === item.answer
        this.questionList = JSON.parse(JSON.stringify(this.questionList))
      },
      // 选中题目
      onMoreChange(item,index) {
        this.questionList[index].youAnswer = item.youAnswer
        this.questionList[index].isRight = item.youAnswer === item.answer
        this.questionList = JSON.parse(JSON.stringify(this.questionList))
      },
      // 交卷
      async doSubmit () {
        this.closeCompletePopup()
        wx.showLoading({title: '提交中'})
        clearInterval(this.timer2)
        await updatePractise ({
          practise_id: this.practiseId,
          isComplete: '1',
          questions: this.questionList,
          useTime: this.nowTime,
        })
        this.isComplete = '1'
        await this.addQuestionRecord(this.questionList)
        wx.reLaunch({
          url: `/pages/brushquestion/questionResult?id=${this.practiseId}&title=${this.title}&ishiddenButton=1`,
        })
        wx.hideLoading()
      },
      // 提交刷题记录
      async addQuestionRecord(subjectList) {
        let tasks = []
        subjectList.forEach(item => {
          const promise = addQuestionRecord({
            question_id: item._id,
            user_id: this._id,
            module_id: item.module_id,
            isRight: item.isRight ? '1' : '2'
          })
          tasks.push(promise)
        })
        console.log(tasks)
        // 等待所有
        await Promise.all(tasks)
      },
      async getQuestionsList () {
        let questionList = []
        if (this.practiseId) {
          let result = await getPractiseById({
            practise_id: this.practiseId
          })
          questionList = result.result.questions
          this.nowTime = result.result.useTime
          this.isComplete = '2'
          this.seconds = Number(result.result.useTime.split(':')[1])
          this.minutes = Number(result.result.useTime.split(':')[0])
          this.questionList = questionList
          // this.practiseData = result.result
        } else {
          let options = {
            user_id: this._id,
            module_id: this.parentmoudleId, // 查询题目时，使用父模块ID
            examination_id: this.examinationId
          }
          let data = await getQuestionBymodule(options)
          if(data.result.resultQuestion.length > 0) {
            questionList = data.result.resultQuestion
            this.nowTime = '00:00'
            this.isComplete = '2'
            options.module_id = this.moudleId // 添加练习时 保存每天的模块ID
            options.questions = questionList.map(item => {
              item.isRight = false
              item.youAnswer = ''
              item.isShowAnswer = false
              item.title = this.formatRichText(item.title)
              item.analysis = this.formatRichText(item.analysis)
              return item
            })
            questionList = options.questions
            let resultP = await addPractise(options)
            this.practiseId = resultP.result._id
          }
          this.questionList = questionList
          // .map(item => {
          //   item.title = this.formatRichText(item.title)
          //   item.analysis = this.formatRichText(item.analysis)
          //   return item
          // })
        }
      },

      /**
       * 处理富文本里的图片宽度自适应
       * 1.去掉img标签里的style、width、height属性
       * 2.img标签添加style属性：max-width:100%;height:auto
       * 3.修改所有style里的width属性为max-width:100%
       * 4.p，code标签添加class
       * 5.去掉<br/>标签
       * @param html
       * @returns {void|string|*}
       */
      formatRichText(html){
        let newContent= html.replace(/<img[^>]*>/gi,function(match,capture){
          match = match.replace(/style="[^"]+"/gi, '').replace(/style='[^']+'/gi, '');
          match = match.replace(/width="[^"]+"/gi, '').replace(/width='[^']+'/gi, '');
          match = match.replace(/height="[^"]+"/gi, '').replace(/height='[^']+'/gi, '');
          return match;
        });
        newContent = newContent.replace(/style="[^"]+"/gi,function(match,capture){
          match = match.replace(/width:[^;]+;/gi, 'width:100%;').replace(/width:[^;]+;/gi, 'width:100%;');
          return match;
        });
        newContent = newContent.replace(/<br[^>]*\/>/gi, '');
        newContent = newContent.replace(/\<p/gi, '<p class="logic-p"');
        newContent = newContent.replace(/\<code/gi, '<p class="logic-code"');
        newContent = newContent.replace(/\<img/gi, '<img style="width:100%;height:auto;display:block;margin:10px 0;"');
        return newContent;
      },
      // 添0
      toZero(timeNumber) {
        return timeNumber < 10 ? '0' + timeNumber : timeNumber
      },
    }
  })
</script>
